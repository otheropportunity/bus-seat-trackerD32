<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>ðŸšŒ Bus Seat Availability Tracker</title>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-database-compat.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background: #f0f4f8;
      padding: 20px;
    }
    h1 { margin-bottom: 10px; }
    #last-location { font-size: 18px; margin-bottom: 10px; color: #333; }
    #seat-stats, #legend {
      font-size: 18px;
      margin-bottom: 15px;
    }
    .legend-box { display: inline-flex; align-items: center; margin: 0 10px; }
    .color-box {
      width: 20px;
      height: 20px;
      border-radius: 4px;
      margin-right: 5px;
      display: inline-block;
    }
    .green { background-color: #28a745; }
    .yellow { background-color: #ffc107; }
    .red { background-color: #dc3545; }
    .bus {
      display: grid;
      grid-template-columns: repeat(5, 80px);
      gap: 10px;
      justify-content: center;
      margin-bottom: 20px;
    }
    .seat, .label {
      width: 80px;
      height: 80px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 16px;
      user-select: none;
      transition: background-color 0.3s ease;
    }
    .seat {
      background-color: #28a745;
      color: white;
      cursor: pointer;
    }
    .seat.selected {
      background-color: #ffc107;
      color: black;
    }
    .seat.taken {
      background-color: #dc3545;
      color: white;
      cursor: not-allowed;
    }
    .label {
      background-color: #ccc;
      cursor: default;
    }
    #lockBtn, #resetBtn {
      padding: 10px 20px;
      font-size: 16px;
      margin: 10px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      user-select: none;
    }
    #resetBtn {
      background-color: #dc3545;
    }
    #lockBtn:disabled, #resetBtn:disabled {
      background-color: #6c757d;
      cursor: not-allowed;
    }
  </style>
</head>
<body>

<h1>ðŸšŒ Bus Seat Availability Tracker</h1>
<div id="last-location"><strong>Last Locked Seat Location:</strong> <span id="last-location-link">Fetching...</span></div>
<div id="seat-stats">Loading seat data...</div>
<div id="legend">
  <span class="legend-box"><span class="color-box green"></span> Available</span>
  <span class="legend-box"><span class="color-box yellow"></span> Pending</span>
  <span class="legend-box"><span class="color-box red"></span> Taken</span>
</div>
<div class="bus" id="bus"></div>
<button id="lockBtn">Lock Seat</button>
<button id="resetBtn">Reset All</button>

<script>
  const firebaseConfig = {
    apiKey: "AIzaSyA9aQHnSMPnk4-xzpvELktHzHnWGo5LHT0",
    authDomain: "bus-seat-allocation.firebaseapp.com",
    databaseURL: "https://bus-seat-allocation-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "bus-seat-allocation"
  };

  firebase.initializeApp(firebaseConfig);
  const db = firebase.database();
  const busId = "bus-001";

  const busContainer = document.getElementById("bus");
  const seatStats = document.getElementById("seat-stats");
  const lastLocationEl = document.getElementById("last-location-link");
  const lockBtn = document.getElementById("lockBtn");
  const resetBtn = document.getElementById("resetBtn");

  let selectedSeats = new Set();
  let isUpdating = false;

  function createSeats() {
    busContainer.innerHTML = "";
    for (let i = 1; i <= 20; i++) {
      const div = document.createElement("div");
      div.classList.add("seat");
      div.textContent = i;
      div.dataset.seat = i;
      div.addEventListener("click", () => toggleSeat(i, div));
      busContainer.appendChild(div);
    }
  }

  function toggleSeat(seatNum, element) {
    if (element.classList.contains("taken")) return;

    if (selectedSeats.has(seatNum)) {
      selectedSeats.delete(seatNum);
      element.classList.remove("selected");
    } else {
      selectedSeats.add(seatNum);
      element.classList.add("selected");
    }
  }

  function updateSeatUI(data) {
    createSeats();
    const takenSeats = new Set();

    for (const key in data) {
      if (key.startsWith("seat") && data[key].taken) {
        const seatNum = parseInt(key.replace("seat", ""));
        takenSeats.add(seatNum);
        const seatDiv = document.querySelector(`.seat[data-seat="${seatNum}"]`);
        if (seatDiv) seatDiv.classList.add("taken");
      }
    }

    seatStats.textContent = `Available: ${20 - takenSeats.size}, Taken: ${takenSeats.size}`;
  }

  function showLastLocation() {
    db.ref(`${busId}/lastLocation`).on("value", (snapshot) => {
      const loc = snapshot.val();
      if (loc && loc.lat && loc.lng) {
        lastLocationEl.innerText = `Lat: ${loc.lat.toFixed(5)}, Lng: ${loc.lng.toFixed(5)}`;
      } else {
        lastLocationEl.innerText = "No data";
      }
    });
  }

  lockBtn.addEventListener("click", async () => {
    if (isUpdating || selectedSeats.size === 0) {
      alert("Please select at least one seat to lock.");
      return;
    }

    lockBtn.disabled = true;
    isUpdating = true;
    const timestamp = Date.now();
    const updates = {};

    selectedSeats.forEach(seat => {
      updates[`${busId}/seat${seat}`] = { taken: true, timestamp };
    });

    try {
      await db.ref().update(updates);

      navigator.geolocation.getCurrentPosition(async (position) => {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        await db.ref(`${busId}/lastLocation`).set({ lat, lng, timestamp });
      }, () => {
        lastLocationEl.innerText = "Location access denied or failed";
      });

      selectedSeats.clear();
    } catch (e) {
      alert("Error: " + e.message);
    }

    isUpdating = false;
    lockBtn.disabled = false;
  });

  resetBtn.addEventListener("click", async () => {
    if (!confirm("Are you sure you want to reset all seats?")) return;
    const updates = {};
    for (let i = 1; i <= 20; i++) {
      updates[`${busId}/seat${i}`] = null;
    }
    await db.ref().update(updates);
  });

  db.ref(busId).on("value", snapshot => {
    const data = snapshot.val() || {};
    updateSeatUI(data);
  });

  showLastLocation();
</script>
</body>
</html>
