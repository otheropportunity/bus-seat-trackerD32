<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>ðŸšŒ Bus Seat Availability Tracker</title>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-database-compat.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background: #f0f4f8;
      padding: 20px;
    }
    h1 { margin-bottom: 10px; }
    #last-location { font-size: 18px; margin-bottom: 10px; color: #333; }
    #seat-stats, #legend {
      font-size: 18px;
      margin-bottom: 15px;
    }
    .legend-box { display: inline-flex; align-items: center; margin: 0 10px; }
    .color-box {
      width: 20px;
      height: 20px;
      border-radius: 4px;
      margin-right: 5px;
      display: inline-block;
    }
    .green { background-color: #28a745; }
    .yellow { background-color: #ffc107; }
    .red { background-color: #dc3545; }
    .bus {
      display: grid;
      grid-template-columns: repeat(5, 80px);
      gap: 10px;
      justify-content: center;
      margin-bottom: 20px;
    }
    .seat, .label {
      width: 80px;
      height: 80px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 16px;
      user-select: none;
      transition: background-color 0.3s ease;
    }
    .seat {
      background-color: #28a745;
      color: white;
      cursor: pointer;
    }
    .seat.selected {
      background-color: #ffc107;
      color: black;
    }
    .seat.pending-other {
      background-color: #ffdb99;
      color: black;
      cursor: not-allowed;
    }
    .seat.taken {
      background-color: #dc3545;
      cursor: not-allowed;
      color: white;
    }
    .label {
      background-color: #ccc;
      cursor: default;
    }
    #lockBtn, #resetBtn {
      padding: 10px 20px;
      font-size: 16px;
      margin: 10px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      user-select: none;
    }
    #resetBtn {
      background-color: #dc3545;
    }
    #lockBtn:disabled, #resetBtn:disabled {
      background-color: #6c757d;
      cursor: not-allowed;
    }
  </style>
</head>
<body>

<h1>ðŸšŒ Bus Seat Availability Tracker</h1>
<div id="last-location"><strong>Last Locked Seat Location:</strong> <span id="last-location-link">Fetching...</span></div>
<div id="seat-stats">Loading seat data...</div>
<div id="legend">
  <span class="legend-box"><span class="color-box green"></span> Available</span>
  <span class="legend-box"><span class="color-box yellow"></span> Pending</span>
  <span class="legend-box"><span class="color-box red"></span> Taken</span>
</div>
<div class="bus" id="bus"></div>
<button id="lockBtn">Lock Seat</button>
<button id="resetBtn">Reset All</button>

<script>
  // âœ… Firebase config
  const firebaseConfig = {
    apiKey: "AIzaSyA9aQHnSMPnk4-xzpvELktHzHnWGo5LHT0",
    authDomain: "bus-seat-allocation.firebaseapp.com",
    databaseURL: "https://bus-seat-allocation-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "bus-seat-allocation",
  };

  firebase.initializeApp(firebaseConfig);
  const db = firebase.database();

  const busId = "bus-001";
  const totalSeats = 20;
  const busElement = document.getElementById("bus");
  const seatStats = document.getElementById("seat-stats");
  const lockBtn = document.getElementById("lockBtn");
  const resetBtn = document.getElementById("resetBtn");
  const selectedSeats = new Set();
  let isUpdating = false;

  function renderSeats(snapshot) {
    busElement.innerHTML = "";
    const data = snapshot.val() || {};
    let available = 0, taken = 0, pending = 0;

    for (let i = 1; i <= totalSeats; i++) {
      const seatId = `seat${i}`;
      const status = data[seatId];
      const seatDiv = document.createElement("div");
      seatDiv.classList.add("seat");
      seatDiv.textContent = i;

      if (status?.taken) {
        seatDiv.classList.add("taken");
        taken++;
      } else if (selectedSeats.has(i)) {
        seatDiv.classList.add("selected");
        pending++;
      } else {
        seatDiv.classList.add("green");
        available++;
      }

      seatDiv.addEventListener("click", () => {
        if (status?.taken) return;
        if (selectedSeats.has(i)) {
          selectedSeats.delete(i);
        } else {
          selectedSeats.add(i);
        }
        renderSeats(snapshot);
      });

      busElement.appendChild(seatDiv);
    }

    seatStats.textContent = `Available: ${available} | Pending: ${pending} | Taken: ${taken}`;
  }

  db.ref(busId).on("value", renderSeats);

  lockBtn.addEventListener("click", async () => {
    if (isUpdating || selectedSeats.size === 0) {
      alert("Please select at least one seat to lock.");
      return;
    }

    lockBtn.disabled = true;
    isUpdating = true;

    const timestamp = Date.now();
    const updates = {};

    selectedSeats.forEach(seat => {
      const seatKey = `seat${seat}`;
      updates[`${busId}/${seatKey}`] = { taken: true, timestamp };
    });

    try {
      await db.ref().update(updates);

      navigator.geolocation.getCurrentPosition(async (position) => {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        await db.ref(`${busId}/lastLocation`).set({ lat, lng, timestamp });

        const link = `https://www.google.com/maps?q=${lat},${lng}`;
        document.getElementById("last-location-link").innerHTML = `<a href="${link}" target="_blank">Location is here</a>`;
      }, () => {
        document.getElementById("last-location-link").innerText = "Location unavailable";
      });

      selectedSeats.clear();
    } catch (e) {
      alert("Error locking seats: " + e.message);
    }

    isUpdating = false;
    lockBtn.disabled = false;
  });

  resetBtn.addEventListener("click", async () => {
    if (!confirm("Reset all seats to available?")) return;
    const updates = {};
    for (let i = 1; i <= totalSeats; i++) {
      updates[`${busId}/seat${i}`] = null;
    }
    await db.ref().update(updates);
    selectedSeats.clear();
  });

  // Show current last locked location on load
  function showLastLocation() {
    db.ref(`${busId}/lastLocation`).on("value", snapshot => {
      const data = snapshot.val();
      const el = document.getElementById("last-location-link");
      if (data && data.lat && data.lng) {
        const link = `https://www.google.com/maps?q=${data.lat},${data.lng}`;
        el.innerHTML = `<a href="${link}" target="_blank">Location is here</a>`;
      } else {
        el.innerText = "No data";
      }
    });
  }

  showLastLocation();
</script>

</body>
</html>
