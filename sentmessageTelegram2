<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>ðŸšŒ Bus Seat Availability Tracker</title>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-database-compat.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background: #f0f4f8;
      padding: 20px;
    }
    .bus {
      display: grid;
      grid-template-columns: repeat(5, 80px);
      gap: 10px;
      justify-content: center;
      margin-bottom: 20px;
    }
    .seat {
      width: 80px;
      height: 80px;
      background-color: #28a745;
      border-radius: 10px;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 16px;
      cursor: pointer;
    }
    .taken { background-color: #dc3545; cursor: not-allowed; }
    .selected { background-color: #ffc107; color: black; }
    #lockBtn, #resetBtn {
      padding: 10px 20px;
      margin: 10px;
      font-size: 16px;
      cursor: pointer;
    }
    #last-location {
      font-size: 18px;
      margin: 15px 0;
      color: #333;
    }
  </style>
</head>
<body>

<h1>ðŸšŒ Bus Seat Availability Tracker</h1>
<div id="last-location">Last Locked Seat Location: <span id="loc-info">Loading...</span></div>

<div class="bus" id="bus"></div>
<button id="lockBtn">Lock Seat</button>

<script>
  const firebaseConfig = {
    apiKey: "AIzaSyA9aQHnSMPnk4-xzpvELktHzHnWGo5LHT0",
    authDomain: "bus-seat-allocation.firebaseapp.com",
    databaseURL: "https://bus-seat-allocation-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "bus-seat-allocation",
  };
  firebase.initializeApp(firebaseConfig);
  const db = firebase.database();

  const busId = "bus-001";
  const busEl = document.getElementById("bus");
  const locInfo = document.getElementById("loc-info");
  const lockBtn = document.getElementById("lockBtn");

  let selectedSeats = new Set();

  // Render seats
  for (let i = 1; i <= 20; i++) {
    const seat = document.createElement("div");
    seat.className = "seat";
    seat.innerText = i;
    seat.dataset.seatId = i;

    seat.onclick = () => {
      if (seat.classList.contains("taken")) return;
      seat.classList.toggle("selected");
      const id = seat.dataset.seatId;
      selectedSeats.has(id) ? selectedSeats.delete(id) : selectedSeats.add(id);
    };

    busEl.appendChild(seat);
  }

  // Load taken seats
  db.ref(busId).on("value", (snap) => {
    const data = snap.val();
    document.querySelectorAll(".seat").forEach(seat => {
      const id = seat.dataset.seatId;
      seat.classList.remove("taken");
      if (data && data[`seat${id}`] && data[`seat${id}`].taken) {
        seat.classList.add("taken");
        seat.classList.remove("selected");
      }
    });
  });

  // Show location
  db.ref(`${busId}/lastLocation`).on("value", (snap) => {
    const val = snap.val();
    if (val?.lat && val?.lng) {
      locInfo.innerText = `Lat: ${val.lat.toFixed(5)}, Lng: ${val.lng.toFixed(5)}`;
    } else if (val?.error) {
      locInfo.innerText = `Location denied`;
    } else {
      locInfo.innerText = "No data";
    }
  });

  // Lock seat + save location
  lockBtn.onclick = async () => {
    if (selectedSeats.size === 0) {
      alert("Select at least one seat");
      return;
    }

    const updates = {};
    const timestamp = Date.now();

    selectedSeats.forEach(seat => {
      updates[`${busId}/seat${seat}`] = { taken: true, timestamp };
    });

    await db.ref().update(updates);
    selectedSeats.clear();

    navigator.geolocation.getCurrentPosition(async (pos) => {
      const lat = pos.coords.latitude;
      const lng = pos.coords.longitude;
      await db.ref(`${busId}/lastLocation`).set({ lat, lng, timestamp });
    }, async () => {
      await db.ref(`${busId}/lastLocation`).set({ lat: null, lng: null, timestamp, error: "Location denied" });
    });
  };
</script>
</body>
</html>
