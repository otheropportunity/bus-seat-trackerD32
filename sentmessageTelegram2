<!DOCTYPE html>
<html>
<head>
  <title>üöå Bus Seat Availability Tracker</title>
  <style>
    body { font-family: Arial; padding: 20px; text-align: center; }
    .grid { display: grid; grid-template-columns: repeat(5, 60px); gap: 10px; justify-content: center; }
    .seat { width: 60px; height: 60px; border-radius: 10px; display: flex; justify-content: center; align-items: center; cursor: pointer; color: white; font-weight: bold; }
    .available { background-color: green; }
    .pending { background-color: yellow; color: black; }
    .taken { background-color: red; }
    .label { margin-top: 20px; }
    .legend span { margin-right: 10px; padding: 5px 10px; border-radius: 5px; display: inline-block; }
  </style>
</head>
<body>

  <h2>üöå Bus Seat Availability Tracker</h2>
  <div id="seatGrid">Loading seat data...</div>

  <div class="label legend">
    <span style="background: green; color: white;">Available</span>
    <span style="background: yellow; color: black;">Pending</span>
    <span style="background: red; color: white;">Taken</span>
  </div>

  <br>
  <button id="lockBtn">üîí Lock Seat</button>

  <h4 id="locationDisplay" style="margin-top: 20px; color: blue;"></h4>

  <!-- Firebase -->
  <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-database-compat.js"></script>

  <script>
    const firebaseConfig = {
      apiKey: "AIzaSyBxkR6Y4ODLqlnsHNv5ZSS6PcPC4CskiVk",
      authDomain: "bus-seat-allocation.firebaseapp.com",
      databaseURL: "https://bus-seat-allocation-default-rtdb.asia-southeast1.firebasedatabase.app",
      projectId: "bus-seat-allocation",
      storageBucket: "bus-seat-allocation.firebasestorage.app",
      messagingSenderId: "103762500529",
      appId: "1:103762500529:web:5c05b8517356656b70bb90"
    };

    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();
    const busId = "bus-001";
    const seatGrid = document.getElementById("seatGrid");
    const lockBtn = document.getElementById("lockBtn");
    const locationDisplay = document.getElementById("locationDisplay");

    let seatStatus = {};
    let selectedSeats = [];

    function renderSeats() {
      seatGrid.innerHTML = '';
      const grid = document.createElement("div");
      grid.className = "grid";
      for (let i = 1; i <= 20; i++) {
        const seatId = `seat-${i}`;
        const status = seatStatus[seatId] || "available";
        const div = document.createElement("div");
        div.className = `seat ${status}`;
        div.innerText = i;
        div.onclick = () => {
          if (status === "available") {
            seatStatus[seatId] = "pending";
            selectedSeats.push(seatId);
          } else if (status === "pending") {
            seatStatus[seatId] = "available";
            selectedSeats = selectedSeats.filter(s => s !== seatId);
          }
          updateUI();
        };
        grid.appendChild(div);
      }
      seatGrid.appendChild(grid);
    }

    function updateUI() {
      renderSeats();
    }

    function fetchSeats() {
      db.ref(busId + "/pendingSelection").on("value", snapshot => {
        seatStatus = {};
        const pending = snapshot.val() || {};
        Object.keys(pending).forEach(seat => {
          seatStatus[seat] = "pending";
        });

        db.ref(busId + "/taken").once("value").then(snap => {
          const taken = snap.val() || {};
          Object.keys(taken).forEach(seat => {
            seatStatus[seat] = "taken";
          });
          updateUI();
        });
      });
    }

    lockBtn.onclick = async () => {
      const updates = {};
      selectedSeats.forEach(seat => {
        updates[`${busId}/taken/${seat}`] = { lockedAt: Date.now() };
      });
      updates[`${busId}/pendingSelection`] = null;

      try {
        await db.ref().update(updates);
        selectedSeats = [];

        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            await db.ref(`${busId}/lastLocation`).set({
              lat,
              lng,
              timestamp: Date.now()
            });
            locationDisplay.innerText = `üìç Last Locked Location: Latitude ${lat}, Longitude ${lng}`;
          },
          async (error) => {
            await db.ref(`${busId}/lastLocation`).set({
              lat: null,
              lng: null,
              timestamp: Date.now(),
              error: error.message || "Location access denied"
            });
            locationDisplay.innerText = `üìç Location unavailable: ${error.message}`;
          },
          {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 0
          }
        );

      } catch (err) {
        console.error("Lock failed", err);
      }
    };

    fetchSeats();
  </script>
</body>
</html>
